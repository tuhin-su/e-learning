services:
  db:
    image: mariadb:10.6
    container_name: db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./db_data:/var/lib/mysql
      - ./db/sql:/docker-entrypoint-initdb.d

  angular:
    build:
      context: ./build
      dockerfile: Dockerfile.angular
    container_name: angular
    command: sh run.sh
    restart: unless-stopped
    volumes:
      - ./web/timt:/app
    environment:
      - API_URL=${API_URL}
      - MODE=${MODE}
    working_dir: /app

  flask:
    build:
      context: ./build
      dockerfile: Dockerfile.flask
    working_dir: /app
    container_name: flask
    restart: unless-stopped
    command: ["bash", "run.sh"]
    volumes:
      - ./app:/app
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: ${DB_HOST}
      DB_DATABASE: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SERVER_NAME: ${SERVER_NAME}
      BOT_KEY: ${BOT_KEY}
      CHANNEL_ID: ${CHANNEL_ID}
      BOT_ENABLE: ${BOT_ENABLE}

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      PMA_HOST: ${DB_HOST}
      PMA_PORT: 3306
    restart: unless-stopped

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    environment:
      - MODE=${MODE}
    ports:
      - 8081:80
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./web/timt/dist/timt:/usr/share/nginx/html
      - ./web/download:/usr/share/nginx/download

    webssh:
      image: webssh-server:latest
      build:
        context: ./build
        dockerfile: Dockerfile.wssh
      container_name: wssh
      command: ["wssh", "--address=0.0.0.0", "--port=8080"]
      environment:
        - WSSH_DEBUG=true
      network_mode: "host"

  cloudflare-tunnel:
    image: cloudflare/cloudflared:latest
    container_name: cloudflare-tunnel
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    command: tunnel --no-autoupdate run --token ${TUNNEL_TOKEN}
    restart: unless-stopped
    network_mode: "host"